["\n#version 100\n\nuniform \tvec4 _Time;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _Amplitude;\nuniform \tfloat _Frequency;\nuniform \tfloat _Speed;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0.x = _Time.y * _Speed + in_TEXCOORD0.x;\n    u_xlat0.x = u_xlat0.x * _Frequency;\n    u_xlat0.x = u_xlat0.x * 6.28310013;\n    u_xlat0.x = sin(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * _Amplitude;\n    u_xlat2 = in_TEXCOORD0.x * 3.1415925;\n    u_xlat2 = sin(u_xlat2);\n    u_xlat0.x = u_xlat0.x * u_xlat2 + in_POSITION0.y;\n    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec4 _Color;\nuniform \tfloat _Amplitude;\nuniform \tfloat _Frequency;\nuniform \tfloat _Speed;\nuniform \tfloat _WaveWidth;\nuniform \tfloat _Display;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nfloat u_xlat2;\nbool u_xlatb2;\nvec2 u_xlat4;\nvoid main()\n{\n    u_xlat0.x = _Time.y * _Speed + vs_TEXCOORD2.x;\n    u_xlat0.x = u_xlat0.x * _Frequency;\n    u_xlat0.x = u_xlat0.x * 6.28310013;\n    u_xlat0.x = sin(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * _Amplitude;\n    u_xlat2 = vs_TEXCOORD2.x * 3.1415925;\n    u_xlat2 = sin(u_xlat2);\n    u_xlat4.xy = vs_TEXCOORD2.yx + vec2(-0.5, -0.5);\n    u_xlat0.x = (-u_xlat0.x) * u_xlat2 + u_xlat4.x;\n    u_xlat2 = -abs(u_xlat4.y) + 1.0;\n    u_xlat4.x = _WaveWidth * u_xlat2 + -abs(u_xlat0.x);\n    u_xlat2 = u_xlat2 * _WaveWidth;\n    u_xlat0.x = abs(u_xlat0.x) / u_xlat2;\n    u_xlat0.x = (-u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlatb2 = u_xlat4.x<0.0;\n    if(u_xlatb2){discard;}\n    u_xlat2 = (-vs_TEXCOORD2.x) + _Display;\n    u_xlatb2 = u_xlat2<0.0;\n    if(u_xlatb2){discard;}\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 * _Color;\n    u_xlat0 = u_xlat0.xxxx * u_xlat1;\n    u_xlat0 = u_xlat0 * vec4(1.5, 1.5, 1.5, 1.5);\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _Amplitude;\nuniform \tfloat _Frequency;\nuniform \tfloat _Speed;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0.x = _Time.y * _Speed + in_TEXCOORD0.x;\n    u_xlat0.x = u_xlat0.x * _Frequency;\n    u_xlat0.x = u_xlat0.x * 6.28310013;\n    u_xlat0.x = sin(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * _Amplitude;\n    u_xlat2 = in_TEXCOORD0.x * 3.1415925;\n    u_xlat2 = sin(u_xlat2);\n    u_xlat0.x = u_xlat0.x * u_xlat2 + in_POSITION0.y;\n    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec4 _Color;\nuniform \tfloat _Amplitude;\nuniform \tfloat _Frequency;\nuniform \tfloat _Speed;\nuniform \tfloat _WaveWidth;\nuniform \tfloat _Display;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nbool u_xlatb2;\nvec2 u_xlat4;\nvoid main()\n{\n    u_xlat0.x = _Time.y * _Speed + vs_TEXCOORD2.x;\n    u_xlat0.x = u_xlat0.x * _Frequency;\n    u_xlat0.x = u_xlat0.x * 6.28310013;\n    u_xlat0.x = sin(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * _Amplitude;\n    u_xlat2 = vs_TEXCOORD2.x * 3.1415925;\n    u_xlat2 = sin(u_xlat2);\n    u_xlat4.xy = vs_TEXCOORD2.yx + vec2(-0.5, -0.5);\n    u_xlat0.x = (-u_xlat0.x) * u_xlat2 + u_xlat4.x;\n    u_xlat2 = -abs(u_xlat4.y) + 1.0;\n    u_xlat4.x = _WaveWidth * u_xlat2 + -abs(u_xlat0.x);\n    u_xlat2 = u_xlat2 * _WaveWidth;\n    u_xlat0.x = abs(u_xlat0.x) / u_xlat2;\n    u_xlat0.x = (-u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlatb2 = u_xlat4.x<0.0;\n    if(u_xlatb2){discard;}\n    u_xlat2 = (-vs_TEXCOORD2.x) + _Display;\n    u_xlatb2 = u_xlat2<0.0;\n    if(u_xlatb2){discard;}\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 * _Color;\n    u_xlat0 = u_xlat0.xxxx * u_xlat1;\n    u_xlat0 = u_xlat0 * vec4(1.5, 1.5, 1.5, 1.5);\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"]